#! /bin/bash

# command-line interface for Geoul
FROM=$1 TO=$PWD/$2
! [ -f "$3" ] || . "$3"

if [ -n "$RSYNC_USER" ]; then
    case "$FROM" in
        *@*) ;;
        rsync://*) FROM=${FROM/:\/\//:\/\/$RSYNC_USER@} ;;
        *::*) FROM="$RSYNC_USER@$FROM" ;;
    esac
fi
export RSYNC_PASSWORD

#HOST=`hostname -f`
HOST=ftp.kr.debian.org
#LOCK="${TO}/Archive-Update-in-Progress-${HOST}"

#LOGFILE=$LOGDIR/debian-cd-mirror.log
# Get in the right directory and set the umask to be group writable
# 
#cd $HOME
umask 022

## Check to see if another sync is in progress
#if lockfile -! -l 43200 -r 0 "$LOCK"; then
#  echo ftp is unable to start rsync, lock file exists
#  exit 1
#fi
#trap 'rm -f $LOCK > /dev/null 2>&1; echo -n "Done at " >> $LOGFILE; date >> $LOGFILE; savelog $LOGFILE > /dev/null' EXIT

let NRSYNCS=0
LOG="/tmp/debian-cd-mirror.$$.log"
:>${LOG}
trap "rm -f ${LOG}; exit" 0 1 2 15
Rsync() {
    let NRSYNCS++
    rsync "$@" 2>&1 | tee -a ${LOG}
    if [ `grep -c '^total size is' ${LOG} ` -ne $NRSYNCS ]; then
#	( echo  "Eeek. Debian jigdo rsync broke down... Check logs.."; \
#	  egrep '^write failed|@ERROR' ${LOG} ) | mail -s "Debian-cd sync failed" $ERRORMAIL
	echo  "Eeek. Debian jigdo rsync broke down..." | tee -a ${LOG}
	exit 1
    fi
}

# Deleting the images before the run if DELETEFIRST is set.

if [ $DELETEFIRST ]; then
	echo "Removing images not on the other host:" #>> $LOGFILE
	Rsync -av --delete --ignore-existing --existing --exclude "$EXCLUDE" \
	${FROM} ${TO} #>>$LOGFILE 2>&1
fi

Rsync -avH --delete --delete-after \
     --timeout 7200 \
     --exclude "Archive-Update-in-Progress-${HOST}" \
     --exclude "project/trace/${HOST}" \
     --exclude "project/trace/cdimage.debian.org" \
     ${EXCLUDE} \
     --exclude "*.iso" \
     ${FROM} ${TO} #>> $LOGFILE 2>&1

echo -n "jigdo rsync done, now generating images. at " #>> $LOGFILE
date #>> $LOGFILE

typeset currentVersion=`ls -l ${TO}/current`
currentVersion="${currentVersion##* -> }"

versionDir="${TO}/${currentVersion}"

for a in ${versionDir}/*/; do
	arch=`basename $a`
	sets=`cat ${TO}/project/build/${currentVersion}/${arch}`
	for s in $sets; do
		typeset jigdoDir=${TO}/${currentVersion}/${arch}/jigdo-${s}
		typeset imageDir=${TO}/${currentVersion}/${arch}/iso-${s}
		if [[ ! -d $imageDir ]]; then
			echo "Creating $imageDir" #>> $LOGFILE
			mkdir -p $imageDir
		fi
		cp $jigdoDir/MD5SUMS $imageDir/MD5SUMS
                jigdoConf=$tmpDirBase/jigdo-mirror.conf
		echo "jigdoDir=$jigdoDir" > $jigdoConf.$arch.$s
		echo "imageDir=$imageDir" >> $jigdoConf.$arch.$s
		echo "tmpDir=$tmpDirBase/$arch.$s" >> $jigdoConf.$arch.$s
#		echo "logfile=${LOGDIR}/$arch.$s.log" >> $jigdoConf.$arch.$s
		cat ${jigdoConfBase} >> $jigdoConf.$arch.$s
		echo -n "jigdoing $arch-$s, starting at " #>>$LOGFILE
		date  #>> $LOGFILE
		jigdo-mirror $jigdoConf.$arch.$s #>>$LOGFILE
	done
done
#savelog ${LOGDIR}/*.log >> $LOGFILE

echo -n "jigdo-mirror done, now doing final rsync. at " #>> $LOGFILE
date #>> $LOGFILE

Rsync -avH --delete --delete-after \
     --timeout 7200 --size-only\
     --exclude "Archive-Update-in-Progress-${HOST}" \
     --exclude "project/trace/${HOST}" \
     ${EXCLUDE} \
     ${FROM}/. $TO/. #>> $LOGFILE 2>&1

echo -n "second sync with delete done at " #>> $LOGFILE
date #>> $LOGFILE

date -u > "${TO}/project/trace/${HOST}"

#rm -f $LOCK > /dev/null 2>&1
