#!/usr/bin/env bash
# check-anomalies -- Check and report anything wrong with our packages
# 
# Created: 2006-04-11
# 
# Written by Jaeho Shin <netj@sparcs.org>.
# (C) 2006, Geoul Project. (http://ftp.kaist.ac.kr/geoul)

MAILTO=${MAILTO:-ftp}
ReportFailedSyncsAfter=1d
ReportLongSyncsEvery=12h

. /mirror/lib/geoul.sh
running_as_mirror_admin "$@"

ReportFailedSyncsAfter=`secondsof $ReportFailedSyncsAfter`
ReportLongSyncsEvery=`secondsof $ReportLongSyncsEvery`
HOSTNAME=`hostname -f`
items=()
item() { items=("${items[@]}" "$@"); }

send_report() {
    local exitcode=$?
    trap "exit $exitcode" EXIT ERR HUP INT TERM
    # report anything exists
    if [ -s $report -o ${#items[@]} -gt 0 ]; then
        {
            echo "= Summary ="
            local i
            for i in "${items[@]}"; do
                echo "* $i"
            done
            echo "Check the [$StatusURL status page] for current data"
            echo
            echo "= Log ="
            cat $report
        } | mail -s "$HOSTNAME STATUS ALERT" "$MAILTO"
    fi
    rm -f $report
    exit $exitcode
}
report=`mktemp /tmp/check-anomalies.XXXXXX`
trap send_report EXIT ERR HUP INT TERM

check() {
    . /mirror/lib/pkg.sh
    local timepast interval failures penalty delay
    compute_times # defines: timepast interval failures penalty delay remaining
    # failed syncs
    if [ -f failed.needsreport -a $timepast -ge $ReportFailedSyncsAfter ]; then
        local when="soon"
        [ $remaining -gt 0 ] && when="after `humaninterval $remaining`"
        item "$pkg: sync failed $failures times; will retry $when"
        echo "== $pkg failed =="
        quotelog .failure.log.gz
        rm -f failed.needsreport  # remove it not to report twice
        echo
    # too long syncs
    elif sync_in_progress; then
        local synctime=$(( `now` - `mtime lock` ))
        local reports=`cat lock.reported 2>/dev/null || echo 0`
        let ++reports
        # report every time exceeding $ReportLongSyncsEvery
        local nextreport=$(( $ReportLongSyncsEvery * $reports ))
        # if sync is taking too much time and we have been quiet for a while,
        if [ $synctime -gt $nextreport ]; then
            # report
            item "$pkg: sync too long; `humaninterval $synctime`"
            echo "== $pkg too long =="
            quotelog log
            echo
            # schedule next report
            local reports_lb=$(( $synctime / $ReportLongSyncsEvery + 1 ))
            [ $reports -ge $reports_lb ] || reports=$reports_lb
            echo $reports >lock.reported
        fi
    fi
    # TODO: simply too old packages
    # TODO: more anomalies?
}

quotelog() {
    local log=$1
    echo "Excerpt of [`log_uri "$log"`]:"
    echo "-->8--"
    excerpt "$log"
    echo "--8<--"
}

foreachpkg check >$report 2>&1
