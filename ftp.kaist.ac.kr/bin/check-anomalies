#!/usr/bin/env bash
# check-anomalies -- Check and report anything wrong with our packages
# 
# Created: 2006-04-11
# 
# Written by Jaeho Shin <netj@sparcs.org>.
# (C) 2006, Geoul Project. (http://ftp.kaist.ac.kr/geoul)

: ${MAILTO:=ftp}
ReportFailedSyncsAfter=P1D
ReportLongSyncsEvery=PT12H
ReportFailuresMoreThan=10 #times

. /mirror/lib/geoul.sh
running_as_mirror_admin "$@"

ReportFailedSyncsAfter=`secondsof $ReportFailedSyncsAfter`
ReportLongSyncsEvery=`secondsof $ReportLongSyncsEvery`

tmp=`mktemp -d /tmp/check-anomalies.XXXXXX`
trap "rm -rf $tmp" EXIT
report=$tmp/report
items=$tmp/items
item() { echo "$@" >>$items; }

check() {
    (
    . /mirror/lib/pkg.sh
    local timepast interval failures delay
    compute_times # defines: timepast interval failures delay remaining
    # too many failures
    if [ $failures -ge $ReportFailuresMoreThan ]; then
        item "$pkg: too many sync failures; $failures times"
        title "$pkg failed too many times"
        echo "Sync failed $failures times so far!"
        quotelog excerpt.failure .failure.log.gz
        echo
    # failed syncs
    elif [ -f failed.needsreport -a $timepast -ge $ReportFailedSyncsAfter ]; then
        local when="soon"
        [ $remaining -gt 0 ] && when="after `humaninterval $remaining`"
        item "$pkg: sync failed $failures times; will retry $when"
        title "$pkg failed"
        echo "Sync failed $failures times so far, and next retry will start $when"
        quotelog excerpt.failure .failure.log.gz
        rm -f failed.needsreport  # remove it not to report twice
        echo
    # too long syncs
    elif sync_in_progress; then
        local synctime=$(( `now` - `mtime lock` ))
        local reports=`cat lock.reported 2>/dev/null || echo 0`
        let ++reports
        # report every time exceeding $ReportLongSyncsEvery
        local nextreport=$(( $ReportLongSyncsEvery * $reports ))
        # if sync is taking too much time and we have been quiet for a while,
        if [ $synctime -gt $nextreport ]; then
            # report
            duration=`humaninterval $synctime`
            item "$pkg: sync too long; $duration"
            title "$pkg too long"
            echo "Sync has been in progress for $duration."
            quotelog excerpt log
            echo
            # schedule next report
            local reports_lb=$(( $synctime / $ReportLongSyncsEvery + 1 ))
            [ $reports -ge $reports_lb ] || reports=$reports_lb
            echo $reports >lock.reported
        fi
    fi
    # TODO: simply too old packages
    # TODO: more anomalies?
    )
} >>$report 2>&1

TitleLine="----------------------------------------"
title() {
    echo "$1"
    echo "${TitleLine:0:${#1}}"
}

quotelog() {
    local excerpt=$1; shift
    local log=$1; shift
    echo "Excerpt of [the log](`log_uri "$log"`) follows:"
    echo
    "$excerpt" "$log" "$@" | sed 's/^/    /'
    echo
}

# check
foreachpkg check

# and report
if [ -s $report -o -s $items ]; then
    {
        if [ -s $items ]; then
            title "Summary"
            cat $items 2>/dev/null |
            while read item; do printf " * %s\n" "$item"; done
            echo "Check [status page][] for the latest status."
            echo
            echo "[status page]: $StatusURL"
            echo
        fi
        if [ -s $report ]; then
            cat $report
        fi
        # links
    } | mail -s "$SITENAME STATUS ALERT" "$MAILTO"
fi
