#!/usr/bin/env bash
# semiautofs - tool for automating mount point administration using autofs maps
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2007-09-18

MASTERMAP=/etc/semiauto.master
MAPSTATEDIR=/var/run/semiautofs

# how to fetch map
fetch() {
    local map=$1
    case "$map" in
        # NIS
        yp:*) ypcat -k ${map#yp:} ;;
        # file system
        *)    cat "$map"          ;;
    esac
}
fetch-master() {
    local master=$1; shift
    # remove comments and empty lines
    sed -e's/#.*$//' -e's/^[ 	]*//g' "$master" | grep -v '^$'
}

# how to translate map to mount/umount commands
map2mounts() {
    local pointroot=$1; shift
    local options=${@:+-o $@}
    while read point source; do
        local mntpt=$pointroot/$point
        # substitute &'s
        local source=${source//&/$point}
        # parse host & path
        local host=${source%%:*}
        local path=${source#*:}
        # determine command depending on host is local or not
        case "$host" in
            localhost|$HOSTNAME)
            mkdir -p $mntpt
            mount -t none --bind $path $mntpt
            ;;
            *)
            mkdir -p $mntpt
            mount $options $source $mntpt
            ;;
        esac
        # TODO: print successful mounts and save it for later umounts
    done
}
map2umounts() {
    local pointroot=$1
    while read point source; do
        local mntpt=$pointroot/$point
        umount -l $mntpt
        rmdir -p $mntpt 2>/dev/null
    done
}

# error message
error() {
    echo "semiautofs: $@" >&2
}


# check request
request=$1; shift
case "$request" in
    start|stop|reload|force-reload|restart) ;;
    *)
    echo "Usage: $0 {start|stop|reload|force-reload|restart}"
    exit 1
    ;;
esac

# process request for each map
fetch-master $MASTERMAP |
while read pointroot map options; do
    mapfile="$MAPSTATEDIR/${pointroot//\//_}.map"
    # mount everything
    start() {
        if [ -e $mapfile ]; then
            error "$pointroot already started"
        else
            mkdir -p `dirname $mapfile`
            fetch $map >$mapfile
            map2mounts  $pointroot $options <$mapfile
            # TODO: save successful mounts for later umounts
        fi
    }
    # umount everything
    stop() {
        if [ -r $mapfile ]; then
            map2umounts $pointroot <$mapfile
            rm -f $mapfile
            # TODO: only remove successful umounts
        else
            error "$pointroot not started"
        fi
    }
    # umount & mount changes
    reload() {
        if [ -r $mapfile ]; then
            if lockfile -r3 $mapfile.new 2>/dev/null; then
                chmod +w $mapfile.new
                fetch $map >$mapfile.new
                diffmap() {
                    local d=$1
                    diff $mapfile $mapfile.new | grep "^$d " | cut -b 3-
                }
                # umount old
                diffmap '<' | map2umounts $pointroot
                # mount new
                diffmap '>' | map2mounts  $pointroot $options
                # replace active map
                mv -f $mapfile.new $mapfile
            else
                error "$pointroot reload in progress"
            fi
        else
            start
        fi
    }
    # process request for this map
    case "$request" in
        start|stop|reload) $request "$@" ;;
        force-reload|restart) stop "$@"; start "$@" ;;
    esac
done
